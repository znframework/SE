<?php namespace ZN\Database;
/**
 * ZN PHP Web Framework
 * 
 * "Simplicity is the ultimate sophistication." ~ Da Vinci
 * 
 * @package ZN
 * @license MIT [http://opensource.org/licenses/MIT]
 * @author  Ozan UYKUN [ozan@znframework.com]
 */

class DBUser extends Connection
{
    //--------------------------------------------------------------------------------------------------------
    // User
    //--------------------------------------------------------------------------------------------------------
    //
    // @var object
    //
    //--------------------------------------------------------------------------------------------------------
    protected $user;

    //--------------------------------------------------------------------------------------------------------
    // Database Manipulation Methods Başlangıç
    //--------------------------------------------------------------------------------------------------------

    public function __construct($settings = [])
    {
        parent::__construct($settings);

        $this->user = $this->_drvlib('User', $settings);
    }

    //--------------------------------------------------------------------------------------------------------
    // name()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $name: USER()
    //
    //--------------------------------------------------------------------------------------------------------
    public function name(String $name) : DBUser
    {
        $this->user->name($name);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // host()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $host: localhost
    //
    //--------------------------------------------------------------------------------------------------------
    public function host(String $host) : DBUser
    {
        $this->user->host($host);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // password()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $authString: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function password(String $authString) : DBUser
    {
        $this->user->password($authString);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // identifiedBy()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $authString: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function identifiedBy(String $authString) : DBUser
    {
        $this->user->identifiedBy($authString);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // identifiedByPassword()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $hashString: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function identifiedByPassword(String $hashString) : DBUser
    {
        $this->user->identifiedByPassword($hashString);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // identifiedWith()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $authPlugin: empty
    // @param string $type      : empty
    // @param string $authString: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function identifiedWith(String $authPlugin, String $type, String $authString) : DBUser
    {
        $this->user->identifiedWith($authPlugin, $type, $authString);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // identifiedWithBy()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $authPlugin: empty
    // @param string $authString: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function identifiedWithBy(String $authPlugin, String $authString) : DBUser
    {
        $this->user->identifiedWithBy($authPlugin, $authString);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // identifiedWithAs()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $hashPlugin: empty
    // @param string $hashString: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function identifiedWithAs(String $hashPlugin, String $hashString) : DBUser
    {
        $this->user->identifiedWithAs($hashPlugin, $hashString);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // required()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function required() : DBUser
    {
        $this->user->required();

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // with()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function with() : DBUser
    {
        $this->user->with();

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // option()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $name
    // @param string $value
    //
    //--------------------------------------------------------------------------------------------------------
    public function option(String $name, String $value) : DBUser
    {
        $this->user->option($name, $value);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // encode()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $type     : SSL, X509, CIPHER value, ISSUER value, SUBJECT value
    // @param string $string   : empty value
    // @param string $condition: and, or
    //
    //--------------------------------------------------------------------------------------------------------
    public function encode(String $type, String $string, String $condition = NULL) : DBUser
    {
        $this->user->encode($type, $string, $condition);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // resource()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $resource: query       => MAX_QUERIES_PER_HOUR
    //                          update      => 'MAX_UPDATES_PER_HOUR
    //                          connection  => 'MAX_CONNECTIONS_PER_HOUR
    //                          user        => 'MAX_USER_CONNECTIONS
    // @param string $count   : 0
    //
    //--------------------------------------------------------------------------------------------------------
    public function resource(String $resource, $count = 0) : DBUser
    {
        $this->user->resource($resource, $count);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // passwordExpire()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $type: empty, DEFAULT, NEVER, INTERVAL
    // @param numeric $n   : 0
    //
    //--------------------------------------------------------------------------------------------------------
    public function passwordExpire(String $type = NULL, $n = 0) : DBUser
    {
        $this->user->passwordExpire($type, $n);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // lock()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $type: lock, unlock
    //
    //--------------------------------------------------------------------------------------------------------
    public function lock(String $type = 'lock') : DBUser
    {
        $this->user->lock($type);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // unlock()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $type: unlock, lock
    //
    //--------------------------------------------------------------------------------------------------------
    public function unlock(String $type = 'unlock') : DBUser
    {
        $this->user->unlock($type);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // type()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $type: TABLE, FUNCTION, PROCEDURE
    //
    //--------------------------------------------------------------------------------------------------------
    public function type(String $type = 'TABLE') : DBUser
    {
        $this->user->type($type);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // select()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $select: *.*
    //
    //--------------------------------------------------------------------------------------------------------
    public function select(String $select = '*.*') : DBUser
    {
        $this->user->select($select);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // grantOption()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void()
    //
    //--------------------------------------------------------------------------------------------------------
    public function grantOption() : DBUser
    {
        $this->user->grantOption();

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // alter()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $name: USER()
    //
    //--------------------------------------------------------------------------------------------------------
    public function alter(String $name = NULL)
    {
        $query = $this->user->alter($name ?? 'USER()');

        return $this->_runQuery($query);
    }

    //--------------------------------------------------------------------------------------------------------
    // create()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $name: USER()
    //
    //--------------------------------------------------------------------------------------------------------
    public function create(String $name = NULL)
    {
        $query = $this->user->create($name ?? 'USER()');

        return $this->_runQuery($query);
    }

    //--------------------------------------------------------------------------------------------------------
    // drop()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $name: USER()
    //
    //--------------------------------------------------------------------------------------------------------
    public function drop(String $name = NULL)
    {
        $query = $this->user->drop($name ?? 'USER()');

        return $this->_runQuery($query);
    }

    //--------------------------------------------------------------------------------------------------------
    // grant()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $name  : ALL
    // @param string  $type  : *.*
    // @param string  $select: *.*
    //
    //--------------------------------------------------------------------------------------------------------
    public function grant(String $name = 'ALL', String $type = NULL, String $select = '*.*')
    {
        $query = $this->user->grant($name, $type, $select);

        return $this->_runQuery($query);
    }

    //--------------------------------------------------------------------------------------------------------
    // revoke()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $name  : ALL
    // @param string  $type  : *.*
    // @param string  $select: *.*
    //
    //--------------------------------------------------------------------------------------------------------
    public function revoke(String $name = 'ALL', String $type = NULL, String $select = '*.*')
    {
        $query = $this->user->revoke($name, $type, $select);

        return $this->_runQuery($query);
    }

    //--------------------------------------------------------------------------------------------------------
    // rename()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $oldName: empty
    // @param string  $newName: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function rename(String $oldName, String $newName)
    {
        $query = $this->user->rename($oldName, $newName);

        return $this->_runQuery($query);
    }

    //--------------------------------------------------------------------------------------------------------
    // setPassword()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string  $user: empty
    // @param string  $pass: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function setPassword(String $user = NULL, String $pass = NULL)
    {
        $query = $this->user->setPassword($user, $pass);

        return $this->_runQuery($query);
    }
}
