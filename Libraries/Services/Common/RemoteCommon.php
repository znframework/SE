<?php namespace ZN\Services;
/**
 * ZN PHP Web Framework
 * 
 * "Simplicity is the ultimate sophistication." ~ Da Vinci
 * 
 * @package ZN
 * @license MIT [http://opensource.org/licenses/MIT]
 * @author  Ozan UYKUN [ozan@znframework.com]
 */

use CLController;
use ZN\DataTypes\Arrays;

class RemoteCommon extends CLController implements RemoteCommonInterface
{
    //--------------------------------------------------------------------------------------------------------
    // Path
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $path;

    //--------------------------------------------------------------------------------------------------------
    // String Command
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $stringCommand;

    //--------------------------------------------------------------------------------------------------------
    // Command
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $command;

     //--------------------------------------------------------------------------------------------------------
    // Path
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  string $path: empty
    // @return object
    //
    //--------------------------------------------------------------------------------------------------------
    public function path(String $path = NULL)
    {
        $this->path = $path;
        
        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // String Command
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function stringCommand() : String
    {
        return (string) $this->stringCommand;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Controller
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $path
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _controller($path)
    {
        $datas = \ZN\Core\Structure::data($path);

        $controller = $datas['page'];
        $function   = $datas['function'] ?? 'main';
        $namespace  = $datas['namespace'];
        $parameters = $datas['parameters'];
        $class      = $namespace . $controller;
        $file       = str_replace('\\', '\\\\', $datas['file']);

        $command    = 'import("'.$file.'");';
        $command   .= 'uselib("'.$class.'")->'.$function.'('. implode(',', array_map('Processor::addNail', $parameters)) .')';

        return $command;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Command
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $path
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _commandFile($path)
    {
        $command = explode(':', $path);

        return '(new \Project\Commands\\'.$command[0].'")->'.$command[1].'()';
    }
}
