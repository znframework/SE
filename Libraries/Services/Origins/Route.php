<?php namespace ZN\Services;
/**
 * ZN PHP Web Framework
 * 
 * "Simplicity is the ultimate sophistication." ~ Da Vinci
 * 
 * @package ZN
 * @license MIT [http://opensource.org/licenses/MIT]
 * @author  Ozan UYKUN [ozan@znframework.com]
 */

use ZN\Core\Kernel;
use ZN\Helpers\Logger;
use ZN\DataTypes\Strings;
use ZN\DataTypes\Arrays;
use ZN\ErrorHandling\Errors;
use ZN\IndividualStructures\Lang;
use ZN\IndividualStructures\Security;

class Route extends \CLController implements RouteInterface
{
    const config = ['Services:route', 'Project:restoration'];

    //--------------------------------------------------------------------------------------------------------
    // Container -> 4.3.2
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $container;

    //--------------------------------------------------------------------------------------------------------
    // Method -> 4.3.1
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $method = [];

    //--------------------------------------------------------------------------------------------------------
    // Route
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $route = [];

    //--------------------------------------------------------------------------------------------------------
    // Use Run Method
    //--------------------------------------------------------------------------------------------------------
    //
    // @var bool
    //
    //--------------------------------------------------------------------------------------------------------
    protected $useRunMethod = false;

    //--------------------------------------------------------------------------------------------------------
    // Routes
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $routes = [];

    //--------------------------------------------------------------------------------------------------------
    // Status
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $status = [];

    //--------------------------------------------------------------------------------------------------------
    // Data
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $data = [];

    //--------------------------------------------------------------------------------------------------------
    // Restore
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $restore;

    //--------------------------------------------------------------------------------------------------------
    // Cache
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $cache;

    //--------------------------------------------------------------------------------------------------------
    // No Cache
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $nocache;

    //--------------------------------------------------------------------------------------------------------
    // Restores
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $restores;

    //--------------------------------------------------------------------------------------------------------
    // Caches
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $caches;

    //--------------------------------------------------------------------------------------------------------
    // No Caches
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $nocaches;

    //--------------------------------------------------------------------------------------------------------
    // CSRF
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $csrf;

    //--------------------------------------------------------------------------------------------------------
    // CSRFS
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $csrfs = [];

    //--------------------------------------------------------------------------------------------------------
    // Ajax
    //--------------------------------------------------------------------------------------------------------
    //
    // @var bool
    //
    //--------------------------------------------------------------------------------------------------------
    protected $ajax;

    //--------------------------------------------------------------------------------------------------------
    // Ajaxs
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $ajaxs = [];

    //--------------------------------------------------------------------------------------------------------
    // Curl
    //--------------------------------------------------------------------------------------------------------
    //
    // @var bool
    //
    //--------------------------------------------------------------------------------------------------------
    protected $curl;

    //--------------------------------------------------------------------------------------------------------
    // Curls
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $curls = [];

    //--------------------------------------------------------------------------------------------------------
    // Restful
    //--------------------------------------------------------------------------------------------------------
    //
    // @var bool
    //
    //--------------------------------------------------------------------------------------------------------
    protected $restful;

    //--------------------------------------------------------------------------------------------------------
    // Restfuls
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $restfuls = [];

    //--------------------------------------------------------------------------------------------------------
    // Redirect
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $redirect;

    //--------------------------------------------------------------------------------------------------------
    // Redirects
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $redirects = [];

    //--------------------------------------------------------------------------------------------------------
    // Redirect
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $callback;
    
    //--------------------------------------------------------------------------------------------------------
    // Redirects
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $callbacks = [];

    //--------------------------------------------------------------------------------------------------------
    // Methods
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $methods = [];

    //--------------------------------------------------------------------------------------------------------
    // Usable
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $usable = [];

    //--------------------------------------------------------------------------------------------------------
    // Masterpage Data
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $mdata = [];

    //--------------------------------------------------------------------------------------------------------
    // Filters
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $filters = ['csrf', 'ajax', 'curl', 'restful', 'restore', 'cache', 'nocache', 'method', 'callback', 'usable'];

    //--------------------------------------------------------------------------------------------------------
    // Pattern Type
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $patternType = 'special';

    //--------------------------------------------------------------------------------------------------------
    // Destruct
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function __destruct()
    {
        if( $this->useRunMethod === true && empty($this->status) )
        {
            $this->redirectShow404(CURRENT_CFUNCTION);
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Show 404 -> 5.1.0
    //--------------------------------------------------------------------------------------------------------
    //
    // @param callable $callback
    //
    //--------------------------------------------------------------------------------------------------------
    public function show404(String $controllerAndMethod)
    {
        if( empty( $this->route ) )
        {
            $this->change('404');
        }

        \Config::set('Services', 'route', ['show404' => $this->route]);

        $this->uri($controllerAndMethod);
    }

    //--------------------------------------------------------------------------------------------------------
    // Container -> 4.3.2
    //--------------------------------------------------------------------------------------------------------
    //
    // @param callable $callback
    //
    //--------------------------------------------------------------------------------------------------------
    public function container(Callable $callback)
    {
        $this->container = true;

        $callback();

        $this->container = false;

        $this->_containerDefaultVariables();
    }

    //--------------------------------------------------------------------------------------------------------
    // Restore -> 4.3.2
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param  mixed  $ips
    //  @param  string $uri
    //
    //--------------------------------------------------------------------------------------------------------
    public function restore($ips, String $uri = NULL) : Route
    {
        $this->restore['ips'] = (array) $ips;
        $this->restore['uri'] = $uri;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Cache -> 5.3.3
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param  int    $time     = 60
    //  @param  mixed  $compress = false
    //  @param  string $driver   = file
    //
    //--------------------------------------------------------------------------------------------------------
    public function cache($time = 60, $compress = false, String $driver = 'file') : Route
    {
        $this->cache['time']     = $time;
        $this->cache['compress'] = $compress;
        $this->cache['driver']   = $driver;
        $this->cache['status']   = true;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // No Cache -> 5.3.3
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param  void
    //
    //--------------------------------------------------------------------------------------------------------
    public function nocache() : Route
    {
        $this->nocache['status'] = false;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // CSRF -> 4.3.2
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param  string $uri = 'post'
    //
    //--------------------------------------------------------------------------------------------------------
    public function CSRF(String $uri = 'post') : Route
    {
        $this->csrf = $uri;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Ajax -> 4.3.4
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function ajax() : Route
    {
        $this->ajax = true;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Curl -> 4.3.4
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function curl() : Route
    {
        $this->curl = true;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Restful -> 4.3.5
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function restful() : Route
    {
        $this->restful = true;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Callback -> 5.4.3
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function callback(Callable $callback) : Route
    {
        $this->callback = $callback;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Filter -> 4.3.2
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param  variadic ...$function
    //  @return void
    //
    //--------------------------------------------------------------------------------------------------------
    public function filter()
    {
        foreach( $this->filters as $filter )
        {
            $filt = '_' . $filter;

            if( method_exists($this, $filt) )
            {
                $this->{$filt}();
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Method 404 -> 4.3.1
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param  variadic ...$function
    //  @return void
    //
    //--------------------------------------------------------------------------------------------------------
    public function method(...$methods) : Route
    {
        $this->method = $methods;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Redirect -> 4.3.2
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param  string $redirect
    //
    //--------------------------------------------------------------------------------------------------------
    public function redirect(String $redirect) : Route
    {
        $this->redirect = $redirect;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // URI
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $path
    // @param bool   $usable
    //
    //--------------------------------------------------------------------------------------------------------
    public function uri(String $path = NULL, $usable = true)
    {
        $path = rtrim($path, '/');

        $routeConfig = \Config::get('Services', 'route');

        if( ! strstr($path, '/') )
        {
            $path = suffix($path) . $routeConfig['openFunction'];
        }

        $lowerPath = strtolower($path);

        $filters = $this->filters;

        array_push($filters, 'redirect');

        $filters = Arrays\RemoveElement::element($filters, 'usable');

        $this->_filter($filters, $lowerPath);

        if( empty($this->route) )
        {
            return false;
        }

        $configPatternType = $routeConfig['patternType'];

        if( $configPatternType === 'classic' )
        {
            $routeString = \Regex::special2classic($this->route);
        }
        elseif( $configPatternType === 'special' )
        {
            $routeString = $this->route;
        }

        // 5.3.21[edited] is empty
        if( trim($routeString, '/') )
        {
            $this->routes['changeUri'][$routeString] = $this->_stringRoute($path, $this->route)[$this->route];
        }

        if( $usable === false )
        {
            $this->usable[$lowerPath]['usable'] = $path;
        }

        $this->route = NULL;
    }

    //--------------------------------------------------------------------------------------------------------
    // Data
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $data
    //
    //--------------------------------------------------------------------------------------------------------
    public function all()
    {
        if( ! empty($this->routes) )
        {
            $config = \Config::get('Services', 'route');

            \Config::set('Services', 'route',
            [
                'changeUri' => array_merge($this->routes['changeUri'], $config['changeUri'])
            ]);

            $this->_defaultVariable();
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Data
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $data
    //
    //--------------------------------------------------------------------------------------------------------
    public function data(Array $data = NULL)
    {
        $this->data = $data;
    }

    //--------------------------------------------------------------------------------------------------------
    // Wizard Data
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $data
    //
    //--------------------------------------------------------------------------------------------------------
    public function wdata(Array $data = NULL)
    {
        $this->data = $data;
    }

    //--------------------------------------------------------------------------------------------------------
    // Masterpage Data
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $data
    //
    //--------------------------------------------------------------------------------------------------------
    public function mdata(Array $data = NULL)
    {
        $this->mdata = $data;
    }

    //--------------------------------------------------------------------------------------------------------
    // Change -> 5.3.22[Edited] - 5.3.32[edited]
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $route
    //
    //--------------------------------------------------------------------------------------------------------
    public function change(String $route) : Route
    {
        $route        = trim($route, '/');
        $return       = true;
        $routeSegment = explode('/', $route);

        // Database Routing
        $route = preg_replace_callback
        (
            '/\[(\w+|\.)\:(\w+|\.)(\s*\,\s*((json|serial|separator))(\:(.*?))*)*\]/i', 
            function($match) use (&$count, &$return, $routeSegment)
            {
                $count   = array_search($match[0], $routeSegment);
                $decoder = $match[4] ?? NULL;
                $value   = $val = URI::segment($count + 1);
                $column  = $match[2];

                // Json, Serial or Separator
                if( $decoder !== NULL )
                {
                    $column = $match[2] . ' like';
                    $value  = \DB::like($value, 'inside');
                }

                $return = \DB::select($match[2])->where($column, $value)->get($match[1])->value();

                // Json, Serial or Separator
                if( $decoder !== NULL )
                {
                    $row       = $match[6] ?? Lang::get();
                    $rows      = $decoder::decode($return);
                    $rowsArray = $decoder::decodeArray($return);
                    $return    = $rows->$row ?? NULL;

                    // Current Lang Manipulation
                    if( $return !== $value && in_array($val, $rowsArray) )
                    {
                        $arrayTransform = array_flip($rowsArray);

                        $newRow = $arrayTransform[$val];
                        $return = $rows->$newRow;

                        if( Lang::shortCodes($newRow) )
                        {
                            Lang::set($newRow);
                        }
                    }
                }

                return $return;

            }, 
            $route
        );

        if( empty($return) )
        {
            $this->route = NULL;
        }
        else
        {
            $this->route = $route;
        }

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Run -> 5.3.53
    //--------------------------------------------------------------------------------------------------------
    // Genel Kullanım: Çalıştırılmak istenen kod bloklarını yönetmek için kullanılır.
    //
    //  @param  string   $functionName
    //  @param  function $functionRun
    //  @param  bool     $usable = true
    //  @return mixed
    //
    //--------------------------------------------------------------------------------------------------------
    public function run(String $functionName, Callable $functionRun = NULL, Bool $usable = true)
    {
        if( in_array($functionName, ['construct', 'destruct']) )
        {
            call_user_func_array($functionRun, CURRENT_CPARAMETERS);
        }

        if( is_file(CURRENT_CFILE) )
        {
            $matches = ( $usable === true ? $functionName === CURRENT_CFUNCTION : false );

            if( $matches )
            {
                $this->uri(CURRENT_CFURI);

                $this->filter();

                call_user_func_array($functionRun, CURRENT_CPARAMETERS);

                $this->_import($functionName);

                $this->status[] = $functionName;

                return;
            }
        }

        $this->useRunMethod = true;
    }

    //--------------------------------------------------------------------------------------------------------
    // Redirect Invalid Request -> 4.3.1
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function redirectInvalidRequest()
    {
        $invalidRequest = \Config::get('Services', 'route')['requestMethods'];

        if( empty($invalidRequest['page']) )
        {
            Logger::report('Error', Lang::select('Error', 'invalidRequest'), 'InvalidRequestError');
            trace(Lang::select('Error', 'invalidRequest'));
        }
        else
        {
            redirect($invalidRequest['page']);
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Redirect Show 404 -> 4.2.7
    //--------------------------------------------------------------------------------------------------------
    //
    //  @param  string $function
    //  @param  string $lang
    //  @param  string $report
    //
    //--------------------------------------------------------------------------------------------------------
    public function redirectShow404(String $function, String $lang = 'callUserFuncArrayError', String $report = 'SystemCallUserFuncArrayError')
    {
        if( ! $routeShow404 = \Config::get('Services', 'route')['show404'] )
        {
            Logger::report('Error', Lang::select('Error', $lang, $function), $report);
            
            die(Errors::message('Error', $lang, $function));
        }
        else
        {
            redirect($routeShow404);
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Filter
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array  $types
    // @param string $lowerPath
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _filter($types, $lowerPath)
    {
        foreach( $types as $type ) if( ! empty($this->{$type}) )
        {
            $this->{$type . 's'}[$lowerPath][$type] = $this->{$type};

            $this->_isContainer($this->{$type});
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected CSRF
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _csrf()
    {
        if( ! empty($this->csrfs) )
        {
            if( $type = ($this->csrfs[CURRENT_CFURI]['csrf'] ?? NULL) )
            {
                $redirect = $this->redirects[CURRENT_CFURI]['redirect'] ?? \Config::get('Services', 'route')['requestMethods']['page'];

                Security\CrossSiteRequestForgery::token($redirect, $type);
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Ajax
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _ajax()
    {
        if( ! empty($this->ajaxs) )
        {
            if( $type = ($this->ajaxs[CURRENT_CFURI]['ajax'] ?? NULL) )
            {
                if( \Http::isAjax() !== true )
                {
                    $this->_redirect();
                }
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Curl
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _curl()
    {
        if( ! empty($this->curls) )
        {
            if( $type = ($this->curls[CURRENT_CFURI]['curl'] ?? NULL) )
            {
                if( \Http::isCurl() === true )
                {
                    $this->_redirect();
                }
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Restful
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _restful()
    {
        if( ! empty($this->restfuls) )
        {
            if( $type = ($this->restfuls[CURRENT_CFURI]['restful'] ?? NULL) )
            {
                if( \Http::isCurl() !== true )
                {
                    $this->_redirect();
                }
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Callback
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _callback()
    {
        if( ! empty($this->callbacks) )
        {
            if( $type = ($this->callbacks[CURRENT_CFURI]['callback'] ?? NULL) )
            {
                $type();
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Restore
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _restore()
    {
        if( ! empty($this->restores) )
        {
            if( $restore = ($this->restores[CURRENT_CFURI]['restore'] ?? NULL) )
            {
                $routeURI = empty($restore['uri'])
                          ? $this->redirects[CURRENT_CFURI]['redirect'] ?? PROJECT_RESTORATION_CONFIG['routePage']
                          : $restore['uri'];

                \Restoration::routeURI($restore['ips'], $routeURI);
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Cache
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _cache()
    {
        if( ! empty($this->caches) )
        {
            if( $cache = ($this->caches[CURRENT_CFURI]['cache'] ?? NULL) )
            {
                \Config::set('Project', 'cache', $cache);
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Cache
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _nocache()
    {
        if( ! empty($this->nocaches) )
        {
            if( $nocache = ($this->nocaches[CURRENT_CFURI]['nocache'] ?? NULL) )
            {
                \Config::set('Project', 'cache', $nocache);
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Method
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _method()
    {
        if( ! empty($this->methods) )
        {
            if( $method = ($this->methods[CURRENT_CFURI]['method'] ?? NULL) )
            {
                if( \Http::isRequestMethod(...$method) === false )
                {
                    $this->_redirect();
                }
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Usable
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _usable()
    {
        if( ! empty($this->usable) )
        {
            if( isset($this->usable[CURRENT_CFURI]['usable']) )
            {
                if( strpos(strtolower(URI::active()), rtrim(CURRENT_CFURI, '/main')) === 0 )
                {
                    $this->_redirect();
                }
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Redirect
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _redirect($direct = SERVICES_ROUTE_CONFIG['requestMethods']['page'])
    {
        if( $redirect = ($this->redirects[CURRENT_CFURI]['redirect'] ?? ($direct)) )
        {
            redirect($redirect);
        }

        $this->redirectInvalidRequest();
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected String Route
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $functionName
    // @param string $route
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _stringRoute($functionName, $route)
    {
        preg_match_all('/\:\w+/', $route, $match);

        $newMatch = [];

        $matchAll = $match[0] ?? [];

        foreach( $matchAll as $key => $val )
        {
            $key++;

            $newMatch[] = "$$key";
        }

        $changeRoute = str_replace($matchAll, $newMatch, $route);
        $changeRoute = str_replace(Strings\Split::divide($route, '/'), $functionName, $changeRoute);
        $route       = [$route => $changeRoute];

        return $route;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Import
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $function
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _import($function)
    {
        Kernel::viewPathFinder($function, $viewPath, $wizardPath);
        Kernel::viewAutoload($wizardPath, $viewPath, $this->data, $this->mdata);
    }

    //--------------------------------------------------------------------------------------------------
    // Protected Static View -> 5.2.73
    //--------------------------------------------------------------------------------------------------
    //
    // @param string $view
    // @param strnig $fix
    //
    //--------------------------------------------------------------------------------------------------
    protected static function _view($view, $fix)
    {
        if( $subdir = STRUCTURE_DATA['subdir'] )
        {
            $view = $subdir;
        }

        return PAGES_DIR . $view . $fix;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Is Container -> 4.3.2
    //--------------------------------------------------------------------------------------------------------
    //
    //  @return var &$data
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _isContainer(&$data)
    {
        if( $this->container !== true )
        {
            $data = NULL;
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Container Default Variable -> 4.3.2
    //--------------------------------------------------------------------------------------------------------
    //
    //  @return void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _containerDefaultVariables()
    {
        $this->method   = NULL;
        $this->redirect = NULL;
        $this->restore  = NULL;
        $this->cache    = NULL;
        $this->nocache  = NULL;
        $this->csrf     = NULL;
        $this->ajax     = NULL;
        $this->curl     = NULL;
        $this->restful  = NULL;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Default Variable -> 4.3.1
    //--------------------------------------------------------------------------------------------------------
    //
    //  @return void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _defaultVariable()
    {
        $this->mdata       = [];
        $this->data        = [];
        $this->route       = [];
        $this->method      = [];
        $this->routes      = [];
    }
}
