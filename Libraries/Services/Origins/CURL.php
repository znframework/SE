<?php namespace ZN\Services;
/**
 * ZN PHP Web Framework
 * 
 * "Simplicity is the ultimate sophistication." ~ Da Vinci
 * 
 * @package ZN
 * @license MIT [http://opensource.org/licenses/MIT]
 * @author  Ozan UYKUN [ozan@znframework.com]
 */

use ZN\Services\Exception\InvalidArgumentException;
use ZN\IndividualStructures\Support;
use ZN\IndividualStructures\IS;
use ZN\Helpers\Converter;

class CURL implements CURLInterface
{
    //--------------------------------------------------------------------------------------------------------
    // Init
    //--------------------------------------------------------------------------------------------------------
    //
    // @var resource
    //
    //--------------------------------------------------------------------------------------------------------
    protected $init;

    //--------------------------------------------------------------------------------------------------------
    // Options
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $options = [];

    //--------------------------------------------------------------------------------------------------------
    // Construct
    //--------------------------------------------------------------------------------------------------------
    //
    // @var void
    //
    //--------------------------------------------------------------------------------------------------------
    public function __construct()
    {
        Support::func('curl_exec', 'CURL');
    }

     //--------------------------------------------------------------------------------------------------------
    // Magic Call -> 5.3.7[edited]
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $method
    // @param array  $parameters
    //
    //--------------------------------------------------------------------------------------------------------
    public function __call($method, $parameters)
    {
        $option = Converter::toConstant($method, 'CURLOPT_');

        $this->options[$option] = $parameters[0] ?? NULL;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Init -> 5.3.2[edit]
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $url
    //
    //--------------------------------------------------------------------------------------------------------
    public function init(String $url = NULL) : CURL
    {
        if( $url !== NULL && ! IS::URL($url) )
        {
            $url = URL::site($url);
        }

        $this->init = curl_init($url);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Exec
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function exec()
    {
        if( ! is_resource($this->init) )
        {
            return false;
        }

        curl_setopt_array($this->init, $this->options);

        $this->options = [];

        if( is_resource($this->init) )
        {
            return curl_exec($this->init);
        }

        return false;
    }

    //--------------------------------------------------------------------------------------------------------
    // Escape
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $url
    //
    //--------------------------------------------------------------------------------------------------------
    public function escape(String $str) : String
    {
        if( ! is_resource($this->init) )
        {
            throw new InvalidArgumentException('Error', 'resourceParameter', '1.(ch)');
        }

        return curl_escape($this->init, $str);
    }

    //--------------------------------------------------------------------------------------------------------
    // Unescape
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $url
    //
    //--------------------------------------------------------------------------------------------------------
    public function unescape(String $str) : String
    {
        if( ! is_resource($this->init) )
        {
            throw new InvalidArgumentException('Error', 'resourceParameter', '1.(ch)');
        }

        return curl_unescape($this->init, $str);
    }

    //--------------------------------------------------------------------------------------------------------
    // Info
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $opt
    //
    //--------------------------------------------------------------------------------------------------------
    public function info(String $opt = NULL)
    {
        if( ! is_resource($this->init) )
        {
            throw new InvalidArgumentException('Error', 'resourceParameter', '1.(ch)');
        }

        if( $opt === NULL )
        {
            return curl_getinfo($this->init);
        }

        return curl_getinfo($this->init, Converter::toConstant($opt, 'CURLINFO_'));
    }

    //--------------------------------------------------------------------------------------------------------
    // Error
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function error() : String
    {
        if( ! is_resource($this->init) )
        {
            throw new InvalidArgumentException('Error', 'resourceParameter', '1.(ch)');
        }

        return curl_error($this->init);
    }

    //--------------------------------------------------------------------------------------------------------
    // Errno
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function errno() : Int
    {
        if( ! is_resource($this->init) )
        {
            throw new InvalidArgumentException('Error', 'resourceParameter', '1.(ch)');
        }

        return curl_errno($this->init);
    }

    //--------------------------------------------------------------------------------------------------------
    // Pause
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $bitmask
    //
    //--------------------------------------------------------------------------------------------------------
    public function pause($bitmask = 0) : Int
    {
        if( ! empty($this->init) )
        {
            return curl_pause($this->init, Converter::toConstant($bitmask, 'CURLPAUSE_'));
        }

        return false;
    }

    //--------------------------------------------------------------------------------------------------------
    // Reset
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function reset() : Bool
    {
        if( ! empty($this->init) )
        {
            curl_reset($this->init);

            return true;
        }

        return false;
    }

    //--------------------------------------------------------------------------------------------------------
    // Option
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $options
    // @param mixed  $value
    //
    //--------------------------------------------------------------------------------------------------------
    public function option(String $options, $value) : CURL
    {
        $this->options[Converter::toConstant($options, 'CURLOPT_')] = $value;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Close
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function close() : Bool
    {
        $init = $this->init;

        if( is_resource($init) )
        {
            $this->init = NULL;

            curl_close($init);

            return true;
        }

        return false;
    }

    //--------------------------------------------------------------------------------------------------------
    // Errval
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $errno
    //
    //--------------------------------------------------------------------------------------------------------
    public function errval(Int $errno = 0) : String
    {
        return curl_strerror($errno);
    }

    //--------------------------------------------------------------------------------------------------------
    // Version
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $errno
    //
    //--------------------------------------------------------------------------------------------------------
    public function version($data = NULL)
    {
        $version = curl_version();

        if( $data === NULL )
        {
            return $version;
        }
        else
        {
            return $version[$data] ?? false;
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // __destruct()
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function __destruct()
    {
        $this->close();
    }
}
