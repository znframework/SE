<?php namespace ZN\Services;
/**
 * ZN PHP Web Framework
 * 
 * "Simplicity is the ultimate sophistication." ~ Da Vinci
 * 
 * @package ZN
 * @license MIT [http://opensource.org/licenses/MIT]
 * @author  Ozan UYKUN [ozan@znframework.com]
 */

use ZN\DataTypes\Strings;
use ZN\IndividualStructures\IS;
use ZN\IndividualStructures\Lang;
use ZN\IndividualStructures\Import;
use ZN\IndividualStructures\Security;

class Email implements EmailInterface
{
    use \DriverAbility, \InformationAbility;

    //--------------------------------------------------------------------------------------------------------
    // Consts
    //--------------------------------------------------------------------------------------------------------
    //
    // @const string/
    //
    //--------------------------------------------------------------------------------------------------------
    const driver =
    [
        'options'   => ['imap', 'mail', 'pipe', 'send', 'smtp'],
        'namespace' => 'ZN\Services\Email\Drivers',
        'construct' => 'settings',
        'config'    => 'Services:email'
    ];

    //--------------------------------------------------------------------------------------------------------
    // Sender Mail
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $senderMail = '';

    //--------------------------------------------------------------------------------------------------------
    // Sender Name
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $senderName = '';

    //--------------------------------------------------------------------------------------------------------
    // Charset
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $charset = 'UTF-8';

    //--------------------------------------------------------------------------------------------------------
    // Content Type
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $contentType = 'plain';

    //--------------------------------------------------------------------------------------------------------
    // CC
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $cc;

    //--------------------------------------------------------------------------------------------------------
    // BCC
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $bcc;

    //--------------------------------------------------------------------------------------------------------
    // Mail Path
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $mailPath = '/usr/sbin/sendmail';

    //--------------------------------------------------------------------------------------------------------
    // LF
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $lf = "\n";

    //--------------------------------------------------------------------------------------------------------
    // SMTP Host
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $smtpHost = '';

    //--------------------------------------------------------------------------------------------------------
    // SMTP User
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $smtpUser = '';

    //--------------------------------------------------------------------------------------------------------
    // SMTP Password
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $smtpPassword = '';

    //--------------------------------------------------------------------------------------------------------
    // SMTP Encode
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $smtpEncode = '';

    //--------------------------------------------------------------------------------------------------------
    // SMTP Port
    //--------------------------------------------------------------------------------------------------------
    //
    // @var int
    //
    //--------------------------------------------------------------------------------------------------------
    protected $smtpPort = 587;

    //--------------------------------------------------------------------------------------------------------
    // SMTP Timeout
    //--------------------------------------------------------------------------------------------------------
    //
    // @var int
    //
    //--------------------------------------------------------------------------------------------------------
    protected $smtpTimeout  = 10;

    //--------------------------------------------------------------------------------------------------------
    // SMTP Auth
    //--------------------------------------------------------------------------------------------------------
    //
    // @var bool
    //
    //--------------------------------------------------------------------------------------------------------
    protected $smtpAuth = true;

    //--------------------------------------------------------------------------------------------------------
    // SMTP Dns
    //--------------------------------------------------------------------------------------------------------
    //
    // @var bool
    //
    //--------------------------------------------------------------------------------------------------------
    protected $smtpDsn  = false;

    //--------------------------------------------------------------------------------------------------------
    // SMTP Keep Alive
    //--------------------------------------------------------------------------------------------------------
    //
    // @var bool
    //
    //--------------------------------------------------------------------------------------------------------
    protected $smtpKeepAlive = false;

    //--------------------------------------------------------------------------------------------------------
    // Mime Version
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $mimeVersion  = '1.0';

    //--------------------------------------------------------------------------------------------------------
    // Boundary
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $boundary = '';

    //--------------------------------------------------------------------------------------------------------
    // Multi Part
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $multiPart    = 'mixed';

    //--------------------------------------------------------------------------------------------------------
    // Multi Parts
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $multiParts   = ['related', 'alternative', 'mixed'];

    //--------------------------------------------------------------------------------------------------------
    // XMailer
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $xMailer = 'ZN';

    //--------------------------------------------------------------------------------------------------------
    // Headers
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $headers = [];

    //--------------------------------------------------------------------------------------------------------
    // Header
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $header = '';

    //--------------------------------------------------------------------------------------------------------
    // Priority Types
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $priorityTypes =
    [
        1 => '1 (Highest)',
        2 => '2 (High)',
        3 => '3 (Normal)',
        4 => '4 (Low)',
        5 => '5 (Lowest)'
    ];

    //--------------------------------------------------------------------------------------------------------
    // Priority
    //--------------------------------------------------------------------------------------------------------
    //
    // @var int
    //
    //--------------------------------------------------------------------------------------------------------
    protected $priority = 3;

    //--------------------------------------------------------------------------------------------------------
    // Encoding Type
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $encodingType = '8bit';

    //--------------------------------------------------------------------------------------------------------
    // Attachments
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $attachments = [];

    //--------------------------------------------------------------------------------------------------------
    // To
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $to = [];

    //--------------------------------------------------------------------------------------------------------
    // Reply to
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $replyTo = [];

    //--------------------------------------------------------------------------------------------------------
    // From
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $from;

    //--------------------------------------------------------------------------------------------------------
    // Subject
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $subject;

    //--------------------------------------------------------------------------------------------------------
    // Message
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $message;

    //--------------------------------------------------------------------------------------------------------
    // Settings
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $settings
    //
    //--------------------------------------------------------------------------------------------------------
    public function settings(Array $settings = NULL) : Email
    {
        $config        = \Config::services('email');
        $smtpConfig    = $config['smtp'];
        $generalConfig = $config['general'];

        foreach( $smtpConfig as $key => $val )
        {
            $nkey = 'smtp'.ucfirst($key);

            $this->$nkey = $settings[$key] ?? $val;
        }

        foreach( $generalConfig as $key => $val )
        {
            $this->$key = $settings[$key] ?? $val;
        }

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Content Type
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $type: plain, html
    //
    //--------------------------------------------------------------------------------------------------------
    public function contentType(String $type = 'plain') : Email
    {
        $this->contentType = $type === 'plain'
                             ? 'plain'
                             : 'html';
        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Charset
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $charset
    //
    //--------------------------------------------------------------------------------------------------------
    public function charset(String $charset = 'UTF-8') : Email
    {
        if( IS::charset($charset) )
        {
            $this->charset = $charset;
        }
        else
        {
            $this->error[] = Lang::select('Error', 'charsetParameter', '1.($charset)');
        }

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Priority
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $count
    //
    //--------------------------------------------------------------------------------------------------------
    public function priority(Int $count = 3) : Email
    {
        $this->priority = preg_match('/^[1-5]$/', $count)
                        ? (int)$count
                        : 3;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Add Header
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $header
    // @param string $value
    //
    //--------------------------------------------------------------------------------------------------------
    public function addHeader(String $header, String $value) : Email
    {
        $this->headers[$header] = str_replace(["\n", "\r"], '', $value);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Encoding Type
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $type
    //
    //--------------------------------------------------------------------------------------------------------
    public function encodingType(String $type = '8bit') : Email
    {
        $this->encodingType = $type;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Multi Part
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $multiPart
    //
    //--------------------------------------------------------------------------------------------------------
    public function multiPart(String $multiPart = 'related') : Email
    {
        $this->multiPart = $multiPart;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // SMTP Host
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $host
    //
    //--------------------------------------------------------------------------------------------------------
    public function smtpHost(String $host) : Email
    {
        $this->smtpHost = $host;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // SMTP User
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $user
    //
    //--------------------------------------------------------------------------------------------------------
    public function smtpUser(String $user) : Email
    {
        $this->smtpUser = $user;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // SMTP DNS
    //--------------------------------------------------------------------------------------------------------
    //
    // @param bool $dsn
    //
    //--------------------------------------------------------------------------------------------------------
    public function smtpDsn(Bool $dsn = true) : Email
    {
        $this->smtpDsn = $dsn;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // SMTP Password
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $pass
    //
    //--------------------------------------------------------------------------------------------------------
    public function smtpPassword(String $pass) : Email
    {
        $this->smtpPassword = $pass;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // SMTP Port
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $port
    //
    //--------------------------------------------------------------------------------------------------------
    public function smtpPort(Int $port = 587) : Email
    {
        $this->smtpPort = $port;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // SMTP Timeout
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $timeout
    //
    //--------------------------------------------------------------------------------------------------------
    public function smtpTimeout(Int $timeout = 10) : Email
    {
        $this->smtpTimeout = $timeout;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // SMTP Keep Alive
    //--------------------------------------------------------------------------------------------------------
    //
    // @param bool $keepAlive
    //
    //--------------------------------------------------------------------------------------------------------
    public function smtpKeepAlive(Bool $keepAlive = true) : Email
    {
        $this->smtpKeepAlive = $keepAlive;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // SMTP Encode
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $encode
    //
    //--------------------------------------------------------------------------------------------------------
    public function smtpEncode(String $encode) : Email
    {
        $this->smtpEncode = $encode;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected To
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $to
    // @param string $name
    // @param string $type
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _to($to, $name, $type = 'to')
    {
        if( is_array($to) )
        {
            if( ! empty($to) ) foreach( $to as $key => $val )
            {
                if( IS::email($key) )
                {
                    $this->{$type}[$key] = $val;
                }
            }
        }
        else
        {
            if( IS::email($to) )
            {
                $this->{$type}[$to] = $name;
            }
            else
            {
                return ! $this->error[] = Lang::select('Error', 'emailParameter', '1.('.$type.')');
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // To
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed  $to
    // @param string $name
    //
    //--------------------------------------------------------------------------------------------------------
    public function to($to, String $name = NULL) : Email
    {
        $this->_to($to, $name, 'to');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Receiver
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed  $to
    // @param string $name
    //
    //--------------------------------------------------------------------------------------------------------
    public function receiver($to, String $name = NULL) : Email
    {
        $this->to($to, $name);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Reply To
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed  $to
    // @param string $name
    //
    //--------------------------------------------------------------------------------------------------------
    public function replyTo($replyTo, String $name = NULL) : Email
    {
        $this->_to($replyTo, $name, 'replyTo');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // CC
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed  $to
    // @param string $name
    //
    //--------------------------------------------------------------------------------------------------------
    public function cc($cc, String $name = NULL) : Email
    {
        $this->_to($cc, $name, 'cc');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // BCC
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed  $to
    // @param string $name
    //
    //--------------------------------------------------------------------------------------------------------
    public function bcc($bcc, String $name = NULL) : Email
    {
        $this->_to($bcc, $name, 'bcc');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // From
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $from
    // @param string $name
    // @param string $returnPath
    //
    //--------------------------------------------------------------------------------------------------------
    public function from(String $from, String $name = NULL, String $returnPath = NULL) : Email
    {
        if( ! IS::email($from) )
        {
            $this->error[] = Lang::select('Error', 'emailParameter', '1.($from)');
        }

        $this->from = $from;
        $returnPath = $returnPath ?? $from;

        $this->addHeader('From', $name.' <'.$from.'>');
        $this->addHeader('Return-Path', '<'.$returnPath.'>');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Sender
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $from
    // @param string $name
    // @param string $returnPath
    //
    //--------------------------------------------------------------------------------------------------------
    public function sender(String $from, String $name = NULL, String $returnPath = NULL) : Email
    {
        $this->from($from, $name, $returnPath);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Subject
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $subject
    //
    //--------------------------------------------------------------------------------------------------------
    public function subject(String $subject) : Email
    {
        $this->subject = $subject;
        $this->addHeader('Subject', $this->subject);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Template -> 5.3.7
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $table
    // @param mixed  $column
    // @param array  $data
    //
    //--------------------------------------------------------------------------------------------------------
    public function template(String $table, $column, Array $data = []) : Email
    {
        if( $content = Import\Template::use($table, (array) $column, true) )
        {
            $this->message($content);
        }
        else
        {
            $tableEx  = explode(':', $table);
            $columnEx = explode(':', $column); 
    
            $table    = $tableEx[0];
            $column   = $tableEx[1] ?? NULL;

            if( $column === NULL )
            {
                $this->error[] = Lang::select('Services', 'email:templateColumnError', '1.($table)');
            }
        
            $whereColumn = $columnEx[0];
            $whereValue  = $columnEx[1] ?? NULL;
            
            if( $whereValue === NULL )
            {
                $this->error[] = Lang::select('Services', 'email:templateValueError', '2.($column)');
            }
            
            if( empty($this->error) )
            {
                $content = \DB::select($column)->where($whereColumn, $whereValue)->get($table)->value();
                
                $this->message($this->templateMatch($content, $data));
            }
        }

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Template Match -> 5.3.7
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $table
    // @param string $column
    // @param array  $data
    //
    //--------------------------------------------------------------------------------------------------------
    public function templateMatch(String $content, Array $data) : String
    {
        $newData = array();
        
        foreach( $data as $key => $val )
        {
            $newData[Strings\Trim::middle('{{'.$key.'}}')] = $val;
        }

        return Security\Html::decode(str_replace(array_keys($newData), array_values($newData), $content));
    }

    //--------------------------------------------------------------------------------------------------------
    // Message
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $message
    //
    //--------------------------------------------------------------------------------------------------------
    public function message(String $message) : Email
    {
        $this->message = $message;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Content
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $message
    //
    //--------------------------------------------------------------------------------------------------------
    public function content(String $message) : Email
    {
        $this->message($message);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Attachment
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $file
    // @param string $disposition
    // @param string $newName
    // @param mixed  $mime
    //
    //--------------------------------------------------------------------------------------------------------
    public function attachment(String $file, String $disposition = NULL, String $newName = NULL, $mime = NULL) : Email
    {
        if( $mime !== NULL )
        {
            if( $mimes = \Mime::$mime() )
            {
                if( is_array($mimes) )
                {
                    $mime = $mimes[0];
                }
                else
                {
                    $mime = $mimes;
                } 
            }

            $fileContent =& $file;
        }

        if( empty($mime) )
        {
            if( strpos($file, '://') === false && ! file_exists($file) )
            {
                $this->error[] = Lang::select('Services', 'email:attachmentMissing', $file);
            }

            if( ! $fp = @fopen($file, 'rb') )
            {
                $this->error[] = Lang::select('Services', 'email:attachmentUnreadable', $file);
            }

            $fileContent = stream_get_contents($fp);

            fclose($fp);
        }

        $this->attachments[] =
        [
            'name'        => [$file, $newName],
            'disposition' => $disposition ?? 'attachment',
            'type'        => $mime,
            'content'     => chunk_split(base64_encode($fileContent))
        ];

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Attachment Content ID
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $filename
    //
    //--------------------------------------------------------------------------------------------------------
    public function attachmentContentId(String $filename)
    {
        if( $this->multiPart !== 'related' )
        {
            $this->multiPart = 'related';
        }

        $count = count($this->attachments);

        for( $index = 0; $index < $count; $index++ )
        {
            if( $this->attachments[$index]['name'][0] === $filename )
            {
                $this->attachments[$index]['contentId'] = uniqid(basename($this->attachments[$index]['name'][0]) . '@');

                return $this->attachments[$index]['contentId'];
            }
        }

        return false;
    }

    //--------------------------------------------------------------------------------------------------------
    // Send
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $subject
    // @param string $message
    //
    //--------------------------------------------------------------------------------------------------------
    public function send(String $subject = NULL, String $message = NULL) : Bool
    {
        if( ! isset($this->headers['From']) )
        {
            if( ! empty($this->senderMail) )
            {
                $this->sender($this->senderMail, $this->senderName);
            }
            else
            {
                return ! $this->error[] = Lang::select('Services', 'email:noFrom');
            }
        }

        if( ! empty($subject) )
        {
            $this->subject($subject);
        }

        if( ! empty($message) )
        {
            $this->message($message);
        }

        if( ! empty($this->to) )
        {
            $this->addHeader('To', $this->_toString($this->to));
        }

        if( ! empty($this->cc) )
        {
            $this->addHeader('Cc', $this->_toString($this->cc));
        }

        if( ! empty($this->bcc) )
        {
            $this->addHeader('Bcc', $this->_toString($this->bcc));
        }

        $this->_buildContent();

        $settings =
        [
            'host'       => $this->smtpHost,
            'user'       => $this->smtpUser,
            'password'   => $this->smtpPassword,
            'from'       => $this->from,
            'port'       => $this->smtpPort,
            'encoding'   => $this->encodingType,
            'timeout'    => $this->smtpTimeout,
            'cc'         => $this->cc,
            'bcc'        => $this->bcc,
            'authLogin'  => $this->smtpAuth,
            'encode'     => $this->smtpEncode,
            'keepAlive'  => $this->smtpKeepAlive,
            'dsn'        => $this->smtpDsn,
            'tos'        => $this->to,
            'mailPath'   => $this->mailPath,
            'returnPath' => $this->headers['Return-Path']
        ];

        $send = $this->driver->send(key($this->to), $this->subject, $this->message, $this->header, $settings);

        if( empty($send) )
        {
            return ! $this->error[] = Lang::select('Services', 'email:noSend');
        }

        $this->_defaultVariables();

        return $send;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Build Headers
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _buildHeaders()
    {
        $this->addHeader('X-Sender',     $this->headers['From']);
        $this->addHeader('X-Mailer',     $this->xMailer);
        $this->addHeader('X-Priority',   $this->priorityTypes[$this->priority]);
        $this->addHeader('Message-ID',   $this->_getMessageId());
        $this->addHeader('Mime-Version', $this->mimeVersion);
        $this->addHeader('Date',         $this->_getDate());
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Get Date
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _getDate()
    {
        $timezone = date('Z');
        $operator = ( $timezone[0] === '-' ) ? '-' : '+';
        $timezone = abs($timezone);
        $timezone = floor($timezone/3600) * 100 + ($timezone % 3600) / 60;

        return sprintf('%s %s%04d', date('D, j M Y H:i:s'), $operator, $timezone);
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Mime Message
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _mimeMessage()
    {
        return Lang::select('Services', 'email:mimeMessage', $this->lf);
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Write Headers
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _writeHeaders()
    {
        foreach( $this->headers as $key => $val )
        {
            $val = trim($val);

            if( ! empty($val) )
            {
                $this->header .= $key.': '.$val.$this->lf;
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Get Message ID
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _getMessageId()
    {
        $from = str_replace(['>', '<'], '', $this->headers['Return-Path']);

        return '<' . uniqid('') . strstr($from, '@') . '>';
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected To Array
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $email
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _toArray($email)
    {
        if( ! is_array($email) )
        {
            return ( strpos($email, ',') !== false )
                   ? preg_split('/[\s,]/', $email, -1, PREG_SPLIT_NO_EMPTY)
                   : (array)trim($email);
        }

        return $email;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected To String
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $email
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _toString($email)
    {
        if( is_array($email) )
        {
            $string = '';

            foreach( $email as $key => $val )
            {
                if( IS::email($key) )
                {
                    $string .= "$val <$key>, ";
                }
            }

            $email = substr(trim($string), 0, -1);
        }

        return $email;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Boundary
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _boundary()
    {
        $this->boundary = 'BOUNDARY_'.md5(uniqid(time()));
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Build Content
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _buildContent()
    {
        $this->_buildHeaders();
        $this->_boundary();
        $this->_writeHeaders();

        $body = ''; $header = '';

        if( in_array($this->multiPart, $this->multiParts) && ! empty($this->attachments) )
        {
            $header .= 'Content-Type: multipart/'.$this->multiPart.'; boundary="'.$this->boundary.'"';

            $body   .= $this->_mimeMessage().$this->lf.$this->lf;
            $body   .= '--'.$this->boundary.$this->lf;
            $body   .= 'Content-Type: text/'.$this->contentType.'; charset='.$this->charset.$this->lf;
            $body   .= 'Content-Transfer-Encoding: '.$this->encodingType.$this->lf.$this->lf;
            $body   .= $this->message.$this->lf.$this->lf;

            $attachment = [];

            for( $i = 0, $z = 0; $i < count($this->attachments); $i++ )
            {
                $filename = $this->attachments[$i]['name'][0];
                $basename = $this->attachments[$i]['name'][1] ?? basename($filename);

                $attachment[$z++] = '--'.$this->boundary.$this->lf.
                                    'Content-Type: '.$this->attachments[$i]['type'].'; name="'.$basename.'"'.$this->lf.
                                    'Content-Disposition: '.$this->attachments[$i]['disposition'].';'.$this->lf.
                                    'Content-Transfer-Encoding: base64'.$this->lf.
                                    ( empty($this->attachments[$i]['contentId'] )
                                    ? ''
                                    : 'Content-ID: <'.$this->attachments[$i]['contentId'].'>'.$this->lf);

                $attachment[$z++] = $this->attachments[$i]['content'];
            }

            $body .= implode($this->lf, $attachment).$this->lf.'--'.$this->boundary.'--';
        }
        else
        {
            $header .= 'Content-Type: text/'.$this->contentType.'; charset='.$this->charset.$this->lf;
        }

        if( $this->selectedDriverName === 'smtp' )
        {
            $this->message = $header.$this->lf.$this->lf.$body.$this->message.$this->lf.$this->lf;
        }
        else
        {
            $this->header = $header.$body;
        }

        return true;
    }


    //--------------------------------------------------------------------------------------------------------
    // Protected Default Variables
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _defaultVariables()
    {
        $this->subject      = '';
        $this->message      = '';
        $this->header       = '';
        $this->headers      = [];
        $this->addHeader('Date', $this->_getDate());
        $this->attachments  = [];
        $this->senderMail   = '';
        $this->senderName   = '';
        $this->charset      = 'UTF-8';
        $this->contentType  = 'plain';
        $this->cc           = NULL;
        $this->bcc          = NULL;
        $this->smtpHost     = '';
        $this->smtpUser     = '';
        $this->smtpPassword = '';
        $this->smtpEncode   = '';
        $this->smtpPort     = 587;
        $this->smtpTimeout  = 10;
        $this->smtpAuth     = true;
        $this->smtpDsn      = false;
        $this->smtpKeepAlive = false;
        $this->mimeVersion  = '1.0';
        $this->boundary     = '';
        $this->multiPart    = 'mixed';
        $this->priority     = 3;
        $this->encodingType = '8bit';
        $this->to           = [];
        $this->replyTo      = [];
        $this->from         = NULL;
        $this->driver       = NULL;
    }
}
