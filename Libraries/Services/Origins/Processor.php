<?php namespace ZN\Services;
/**
 * ZN PHP Web Framework
 * 
 * "Simplicity is the ultimate sophistication." ~ Da Vinci
 * 
 * @package ZN
 * @license MIT [http://opensource.org/licenses/MIT]
 * @author  Ozan UYKUN [ozan@znframework.com]
 */

use ZN\IndividualStructures\Buffer;

class Processor extends RemoteCommon implements ProcessorInterface
{
    const config = 'Services:processor';

    //--------------------------------------------------------------------------------------------------------
    // Output
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $output;

    //--------------------------------------------------------------------------------------------------------
    // Return
    //--------------------------------------------------------------------------------------------------------
    //
    // @var int
    //
    //--------------------------------------------------------------------------------------------------------
    protected $return;

    //--------------------------------------------------------------------------------------------------------
    // Driver
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $driver;

    //--------------------------------------------------------------------------------------------------------
    // Construct
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function __construct()
    {
        parent::__construct();

        $config       = SERVICES_PROCESSOR_CONFIG;
        $this->path   = $config['path'];
        $this->driver = $config['driver'];
    }

    //--------------------------------------------------------------------------------------------------------
    // Type -> 5.4.4[added]
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  void
    // @return string
    //
    //--------------------------------------------------------------------------------------------------------
    public function type() : String
    {
        switch( $name = substr($sapi = php_sapi_name(), 0, 3) )
        {
            case 'cli' : 
            case 'cgi' : return $name;

            default    : return $sapi;
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Exec
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  string $command: empty
    // @return string
    //
    //--------------------------------------------------------------------------------------------------------
    public function exec($command)
    {
        switch( $this->driver )
        {
            case 'exec':
                $return = exec($command, $this->output, $this->return);
            break;

            case 'shell_exec':
            case 'shell'     :
                $return       = shell_exec($command);
                $this->output = $this->_split($return);
                $this->return = 0;
            break;

            case 'system':
                $return       = Buffer\Callback::do(function() use($command) {system($command, $this->return);});
                $this->output = $this->_split($return);
            break;

            case 'ssh':
                \SSH::run($command);
                $this->output = $this->_split($return = SSH::output());
                $this->return = 0;
            break;
        }

        return $return ?? false;
    }

    //--------------------------------------------------------------------------------------------------------
    // Driver
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function driver(String $driver) : Processor
    {
        $this->driver = $driver;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Output
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function output() : Array
    {
        return (array) $this->output;
    }

    //--------------------------------------------------------------------------------------------------------
    // Return
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function return() : Int
    {
        return (int) $this->return;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Split -> 5.3.6
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $string
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _split($string)
    {
        return explode("\n", rtrim($string, "\n"));
    }

    //--------------------------------------------------------------------------------------------------------
    // Run
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _run($command)
    {
        $return = $this->exec($command);

        $this->_defaultVariables();

        return $return;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Default Variables
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _defaultVariables()
    {
        $this->command = NULL;
        $this->path    = NULL;
        $this->driver  = NULL;
    }
}
